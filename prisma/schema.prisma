// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
  // url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
  id          Int      @id @default(autoincrement())
  createdById String
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy User @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@index([name])
  @@map("post")
}

model Course {
  id          String   @id @default(cuid())
  createdById String
  code        String
  title       String
  description String?
  image       String?
  categoryId  String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  category  Category? @relation(fields: [categoryId], references: [id])

  attachment Attachment[]

  @@index([code, categoryId])
  @@map("course")
}

model Attachment {
  id        String   @id @default(cuid())
  courseId  String
  name      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@map("attachment")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses Course[]

  @@map("category")
}

// -----------------------------------------------------------------------------
// Auth Models
// -----------------------------------------------------------------------------

enum UserRole {
  INSTRUCTOR
  STUDENT
}

model User {
  id                 String    @id @default(cuid())
  email              String?   @unique
  emailVerified      DateTime? @map("email_verified")
  password           String?
  role               UserRole  @default(STUDENT)
  isTwoFactorEnabled Boolean   @default(false)

  profile               Profile?
  accounts              Account[]
  verificationToken     VerificationToken[]
  passwordResetToken    PasswordResetToken[]
  twoFactorToken        TwoFactorToken[]
  twoFactorConfirmation TwoFactorConfirmation?

  posts   Post[]
  courses Course[]

  @@map("user")
}

model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique
  name        String?
  image       String?
  bio         String?
  dateOfBirth DateTime? @map("date_of_birth")
  gender      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  user User @relation(fields: [email], references: [email], onDelete: Cascade)

  @@unique([email, token])
  @@map("verification_token")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  user User @relation(fields: [email], references: [email], onDelete: Cascade)

  @@unique([email, token])
  @@map("password_reset_token")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  user User @relation(fields: [email], references: [email], onDelete: Cascade)

  @@unique([email, token])
  @@map("two_factor_token")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("two_factor_confimation")
}
