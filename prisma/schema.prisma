generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // local
  // url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// -----------------------------------------------------------------------------
// Course Models
// -----------------------------------------------------------------------------

model Attachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId               String?
  chapterId              String?
  assignmentSubmissionId String?

  course               Course?               @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapter              Chapter?              @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  assignmentSubmission AssignmentSubmission? @relation(fields: [assignmentSubmissionId], references: [id])

  @@index([courseId, chapterId, assignmentSubmissionId])
  @@map("attachment")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses Course[]

  @@map("category")
}

model CourseEnrollment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String
  courseId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId, courseId])
  @@map("course_enrollment")
}

enum Status {
  PUBLISHED
  DRAFT
  ARCHIVED

  @@map("status")
}

model Course {
  id          String   @id @default(cuid())
  code        String
  title       String
  description String?
  imageUrl    String?
  status      Status   @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdById      String
  categoryId       String?
  attachment       Attachment[]
  chapter          Chapter[]
  courseEnrollment CourseEnrollment[]

  createdBy User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  category  Category? @relation(fields: [categoryId], references: [id])

  @@index([code, categoryId])
  @@map("course")
}

enum ChapterType {
  ASSESSMENT
  ASSIGNMENT
  LESSON

  @@map("chapter_type")
}

model Chapter {
  id        String      @id @default(cuid())
  title     String
  content   String?
  videoUrl  String?
  position  Int
  type      ChapterType @default(LESSON)
  status    Status      @default(DRAFT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  courseId        String
  muxData         MuxData?
  assessments     Assessment[]
  assignments     Assignment[]
  attachment      Attachment[]
  chapterProgress ChapterProgress[]

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId, position])
  @@map("chapter")
}

model Assessment {
  id            String    @id @default(cuid())
  title         String
  instructions  String?
  startAt       DateTime?
  endAt         DateTime?
  submissionDue DateTime?

  chapterId String
  sections  AssessmentSection[]

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId])
  @@map("assessment")
}

model AssessmentSection {
  id           String  @id @default(cuid())
  title        String
  instructions String?
  position     Int

  assessmentId String
  questions    AssessmentQuestion[]

  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@index([assessmentId, position])
  @@map("assessment_section")
}

enum QuestionType {
  MULTIPLE_CHOICE // multiple choice, single answer
  MULTIPLE_SELECT // multiple correct answers
  TRUE_FALSE // true/false
  ESSAY // essay, free response

  @@map("question_type")
}

model AssessmentQuestion {
  id       String       @id @default(cuid())
  type     QuestionType
  question String
  options  Json?
  answer   Json?
  points   Float

  sectionId        String
  assessmentAnswer AssessmentAnswer[]

  section AssessmentSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([sectionId])
  @@map("assessment_question")
}

model AssessmentAnswer {
  id        String  @id @default(cuid())
  answer    Json
  isCorrect Boolean

  studentId  String
  questionId String

  student  User               @relation(fields: [studentId], references: [id], onDelete: Cascade)
  question AssessmentQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([studentId, questionId])
  @@index([studentId, questionId])
  @@map("assessment_answer")
}

model Assignment {
  id            String    @id @default(cuid())
  title         String
  instructions  String?
  startAt       DateTime?
  endAt         DateTime?
  submissionDue DateTime?

  chapterId  String
  submission AssignmentSubmission[]

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId])
  @@map("assignment")
}

model AssignmentSubmission {
  id          String    @id @default(cuid())
  content     String?
  submittedAt DateTime?
  grade       Float?

  studentId    String
  assignmentId String
  attachment   Attachment[]

  student    User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@unique([studentId, assignmentId])
  @@index([studentId, assignmentId])
  @@map("assignment_submission")
}

model MuxData {
  id         String @id @default(cuid())
  assetId    String
  playbackId String

  chapterId String @unique

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId])
  @@map("mux_data")
}

model ChapterProgress {
  id          String   @id @default(cuid())
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId    String
  chapterId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([chapterId, userId])
  @@index([chapterId, userId])
  @@map("chapter_progress")
}

// -----------------------------------------------------------------------------
// Auth Models
// -----------------------------------------------------------------------------

enum Role {
  INSTRUCTOR
  STUDENT

  @@map("role")
}

model User {
  id                 String    @id @default(cuid())
  email              String?   @unique
  emailVerified      DateTime? @map("email_verified")
  password           String?
  role               Role      @default(STUDENT)
  isTwoFactorEnabled Boolean   @default(false)

  profile               Profile?
  accounts              Account[]
  verificationTokens    VerificationToken[]
  passwordResetTokens   PasswordResetToken[]
  twoFactorTokens       TwoFactorToken[]
  twoFactorConfirmation TwoFactorConfirmation?

  courseEnrollment     CourseEnrollment[]
  courses              Course[]
  chapterProgress      ChapterProgress[]
  assessmentAnswer     AssessmentAnswer[]
  assignmentSubmission AssignmentSubmission[]

  @@index([email])
  @@map("user")
}

model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique
  name        String?
  image       String?
  bio         String?
  dateOfBirth DateTime? @map("date_of_birth")
  gender      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  user User @relation(fields: [email], references: [email], onDelete: Cascade)

  @@unique([email, token])
  @@map("verification_token")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  user User @relation(fields: [email], references: [email], onDelete: Cascade)

  @@unique([email, token])
  @@map("password_reset_token")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  user User @relation(fields: [email], references: [email], onDelete: Cascade)

  @@unique([email, token])
  @@map("two_factor_token")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("two_factor_confimation")
}
