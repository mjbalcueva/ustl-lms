generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // url      = env("DATABASE_URL") // local
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// -----------------------------------------------------------------------------
// LMS Models
// -----------------------------------------------------------------------------

enum Status {
  PUBLISHED
  DRAFT
  ARCHIVED

  @@map("status")
}

model Course {
  courseId     String @id @default(cuid()) @map("course_id")
  instructorId String @map("instructor_id")

  code        String
  title       String
  description String?
  imageUrl    String?
  token       String?  @unique
  status      Status   @default(DRAFT)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  tags        CourseTag[]
  attachments CourseAttachment[]
  enrollments CourseEnrollment[]
  chapters    Chapter[]

  instructor User @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  @@index([code, token, instructorId])
  @@map("course")
}

model CourseTag {
  tagId        String @id @default(cuid()) @map("tag_id")
  instructorId String @map("instructor_id")

  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  instructor User     @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  courses    Course[]

  @@index([instructorId])
  @@map("course_tag")
}

model CourseAttachment {
  attachmentId String @id @default(cuid()) @map("attachment_id")
  courseId     String @map("course_id")

  name      String
  url       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  course Course? @relation(fields: [courseId], references: [courseId], onDelete: Cascade)

  @@index([courseId])
  @@map("course_attachment")
}

model CourseEnrollment {
  enrollmentId String @id @default(cuid()) @map("enrollment_id")
  studentId    String @map("student_id")
  courseId     String @map("course_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  student User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course @relation(fields: [courseId], references: [courseId], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@index([studentId, courseId])
  @@map("student_course_enrollment")
}

enum ChapterType {
  ASSESSMENT
  ASSIGNMENT
  LESSON

  @@map("chapter_type")
}

model Chapter {
  chapterId String @id @default(cuid()) @map("chapter_id")
  courseId  String @map("course_id")

  title     String
  content   String?
  videoUrl  String?
  type      ChapterType @default(LESSON)
  status    Status      @default(DRAFT)
  position  Int         @default(1)
  startAt   DateTime?   @map("start_at")
  endAt     DateTime?   @map("end_at")
  dueAt     DateTime?   @map("due_at")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  muxData         ChapterMuxData?
  attachments     ChapterAttachment[]
  assessments     ChapterAssessment[]
  submissions     AssignmentSubmission[]
  chapterProgress ChapterProgress[]

  course Course @relation(fields: [courseId], references: [courseId], onDelete: Cascade)

  @@index([courseId, position])
  @@map("chapter")
}

model ChapterMuxData {
  muxId      String @id @default(cuid()) @map("mux_id")
  chapterId  String @unique @map("chapter_id")
  assetId    String @map("asset_id")
  playbackId String @map("playback_id")

  chapter Chapter @relation(fields: [chapterId], references: [chapterId], onDelete: Cascade)

  @@index([chapterId])
  @@map("chapter_mux_data")
}

model ChapterAttachment {
  attachmentId String @id @default(cuid()) @map("attachment_id")
  chapterId    String @map("chapter_id")

  name      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapter Chapter? @relation(fields: [chapterId], references: [chapterId], onDelete: Cascade)

  @@index([chapterId])
  @@map("chapter_attachment")
}

model ChapterProgress {
  progressId String @id @default(cuid()) @map("progress_id")
  studentId  String @map("user_id")
  chapterId  String @map("chapter_id")

  isCompleted Boolean  @default(false) @map("is_completed")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user    User    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  chapter Chapter @relation(fields: [chapterId], references: [chapterId], onDelete: Cascade)

  @@unique([chapterId, studentId])
  @@index([chapterId, studentId])
  @@map("student_chapter_progress")
}

model ChapterAssessment {
  assessmentId String @id @default(cuid()) @map("assessment_id")
  chapterId    String @map("chapter_id")

  title            String
  instruction      String?
  shuffleQuestions Boolean @default(false) @map("shuffle_questions")
  shuffleOptions   Boolean @default(false) @map("shuffle_options")
  position         Int     @default(1)

  questions AssessmentQuestion[]

  chapter Chapter @relation(fields: [chapterId], references: [chapterId], onDelete: Cascade)

  @@index([chapterId, position])
  @@map("chapter_assessment")
}

enum AssessmentQuestionType {
  MULTIPLE_CHOICE @map("multiple_choice")
  MULTIPLE_SELECT @map("multiple_select")
  TRUE_OR_FALSE   @map("true_or_false")

  @@map("assessment_question_type")
}

model AssessmentQuestion {
  questionId   String @id @default(cuid()) @map("question_id")
  assessmentId String @map("assessment_id")

  questionType AssessmentQuestionType @default(MULTIPLE_CHOICE) @map("question_type")
  question     String
  options      Json?
  points       Float                  @default(1)
  position     Int                    @default(1)

  answers AssessmentAnswer[]

  assessment ChapterAssessment @relation(fields: [assessmentId], references: [assessmentId], onDelete: Cascade)

  @@index([assessmentId])
  @@map("chapter_assessment_question")
}

model AssessmentAnswer {
  answerId   String @id @default(cuid()) @map("answer_id")
  studentId  String @map("student_id")
  questionId String @map("question_id")

  answer    Json
  isCorrect Boolean @map("is_correct")

  student  User               @relation(fields: [studentId], references: [id], onDelete: Cascade)
  question AssessmentQuestion @relation(fields: [questionId], references: [questionId], onDelete: Cascade)

  @@unique([questionId, studentId])
  @@index([studentId, questionId])
  @@map("student_assessment_answer")
}

model AssignmentSubmission {
  submissionId String @id @default(cuid()) @map("submission_id")
  chapterId    String @map("chapter_id")
  studentId    String @map("student_id")

  content     String?
  submittedAt DateTime @default(now()) @map("submitted_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  grade       Float?

  attachments AssignmentSubmissionAttachment[]

  student User    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  chapter Chapter @relation(fields: [chapterId], references: [chapterId], onDelete: Cascade)

  @@unique([studentId, chapterId])
  @@index([studentId, chapterId])
  @@map("student_assignment_submission")
}

model AssignmentSubmissionAttachment {
  attachmentId String @id @default(cuid()) @map("attachment_id")
  submissionId String @map("submission_id")

  name      String
  url       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  submission AssignmentSubmission @relation(fields: [submissionId], references: [submissionId], onDelete: Cascade)

  @@index([submissionId])
  @@map("student_assignment_submission_attachment")
}

// -----------------------------------------------------------------------------
// Auth Models
// -----------------------------------------------------------------------------

enum Role {
  INSTRUCTOR
  STUDENT

  @@map("role")
}

model User {
  id                 String    @id @default(cuid())
  email              String?   @unique
  emailVerified      DateTime? @map("email_verified")
  password           String?
  role               Role      @default(STUDENT)
  isTwoFactorEnabled Boolean   @default(false)

  profile               Profile?
  accounts              Account[]
  verificationTokens    VerificationToken[]
  passwordResetTokens   PasswordResetToken[]
  twoFactorTokens       TwoFactorToken[]
  twoFactorConfirmation TwoFactorConfirmation?

  enrollments           CourseEnrollment[]
  tags                  CourseTag[]
  courses               Course[]
  chapterProgress       ChapterProgress[]
  assessmentAnswers     AssessmentAnswer[]
  assignmentSubmissions AssignmentSubmission[]

  @@index([email])
  @@map("user")
}

model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique
  name        String?
  imageUrl    String?
  bio         String?
  dateOfBirth DateTime? @map("date_of_birth")
  gender      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profile")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("user_account")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  user User @relation(fields: [email], references: [email], onDelete: Cascade)

  @@unique([email, token])
  @@map("user_verification_token")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  user User @relation(fields: [email], references: [email], onDelete: Cascade)

  @@unique([email, token])
  @@map("user_password_reset_token")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  user User @relation(fields: [email], references: [email], onDelete: Cascade)

  @@unique([email, token])
  @@map("user_two_factor_token")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("user_two_factor_confirmation")
}
